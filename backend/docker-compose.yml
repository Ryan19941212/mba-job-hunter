version: '3.8'

# MBA Job Hunter - Docker Compose Configuration
# This file defines the development environment with all required services

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mba-job-hunter-db
    environment:
      POSTGRES_DB: mba_job_hunter
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - mba-job-hunter-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mba-job-hunter-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mba-job-hunter-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mba-job-hunter-api
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/mba_job_hunter
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
      - SECRET_KEY=your-secret-key-change-in-production-make-it-32-chars-minimum
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - ENABLE_BACKGROUND_SCRAPING=true
      - ENABLE_AUTO_MATCHING=true
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - postgres
      - redis
    networks:
      - mba-job-hunter-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker (for background tasks)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mba-job-hunter-worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/mba_job_hunter
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - SECRET_KEY=your-secret-key-change-in-production-make-it-32-chars-minimum
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - postgres
      - redis
    networks:
      - mba-job-hunter-network
    restart: unless-stopped
    # Note: Celery integration would need to be implemented
    # command: celery -A app.services.celery_app worker --loglevel=info
    command: python -m app.services.background_worker

  # Celery Beat (for scheduled tasks)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mba-job-hunter-scheduler
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/mba_job_hunter
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - SECRET_KEY=your-secret-key-change-in-production-make-it-32-chars-minimum
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - postgres
      - redis
    networks:
      - mba-job-hunter-network
    restart: unless-stopped
    # Note: Celery integration would need to be implemented  
    # command: celery -A app.services.celery_app beat --loglevel=info
    command: python -m app.services.scheduler

  # Nginx (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: mba-job-hunter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - mba-job-hunter-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mba-job-hunter-network:
    driver: bridge