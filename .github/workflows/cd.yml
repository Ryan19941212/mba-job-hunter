name: 🚀 Continuous Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/cd.yml'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # 構建和發布 Docker 鏡像
  build-and-push:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🔍 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=staging,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            
      - name: 🐳 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VERSION=${{ github.sha }}
            VCS_REF=${{ github.sha }}
            
      - name: 📝 Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # 部署到 Staging 環境
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.mba-job-hunter.com
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: 🔐 Configure Kubernetes credentials
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
      - name: 🎯 Deploy to Staging
        run: |
          # Replace image in deployment manifest
          sed -i "s|IMAGE_PLACEHOLDER|${{ needs.build-and-push.outputs.image }}|g" k8s/staging/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/staging/namespace.yaml
          kubectl apply -f k8s/staging/configmap.yaml
          kubectl apply -f k8s/staging/secrets.yaml
          kubectl apply -f k8s/staging/deployment.yaml
          kubectl apply -f k8s/staging/service.yaml
          kubectl apply -f k8s/staging/ingress.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/mba-job-hunter-api -n staging --timeout=300s
          
      - name: 🏥 Health Check
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Check health endpoint
          for i in {1..10}; do
            if curl -f https://staging.mba-job-hunter.com/api/v1/health; then
              echo "✅ Staging deployment successful!"
              break
            fi
            echo "⏳ Waiting for staging health check... ($i/10)"
            sleep 30
          done
          
      - name: 🧪 Run Smoke Tests
        run: |
          # Basic smoke tests against staging
          curl -f https://staging.mba-job-hunter.com/
          curl -f https://staging.mba-job-hunter.com/api/v1/health
          curl -f https://staging.mba-job-hunter.com/api/docs
          
      - name: 📢 Notify Staging Deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🧪 Staging deployment ${{ job.status }}
            🏷️ Image: ${{ needs.build-and-push.outputs.image }}
            🔗 URL: https://staging.mba-job-hunter.com
            👤 Deployed by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 生產環境部署準備
  production-gate:
    name: 🚪 Production Gate
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.event_name == 'release' || github.event.inputs.environment == 'production'
    environment:
      name: production-gate
      
    steps:
      - name: 🔍 Manual Approval Required
        run: |
          echo "🚪 Production deployment requires manual approval"
          echo "📋 Pre-deployment checklist:"
          echo "  ✅ Staging tests passed"
          echo "  ✅ Security scans completed"
          echo "  ✅ Database migrations reviewed"
          echo "  ✅ Rollback plan prepared"

  # 部署到 Production 環境
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, production-gate]
    if: (github.event_name == 'release' || github.event.inputs.environment == 'production') && (github.event.inputs.force_deploy == 'true' || needs.deploy-staging.result == 'success')
    environment:
      name: production
      url: https://mba-job-hunter.com
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: 🔐 Configure Kubernetes credentials
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
      - name: 🗃️ Database Migration Check
        run: |
          # Check if database migrations are needed
          echo "🔍 Checking database migrations..."
          kubectl exec -n production deployment/mba-job-hunter-api -- alembic current
          kubectl exec -n production deployment/mba-job-hunter-api -- alembic check
          
      - name: 🗃️ Run Database Migrations
        run: |
          # Run database migrations
          echo "🏗️ Running database migrations..."
          kubectl exec -n production deployment/mba-job-hunter-api -- alembic upgrade head
          
      - name: 🎯 Blue-Green Deployment
        run: |
          # Create green deployment
          sed -i "s|IMAGE_PLACEHOLDER|${{ needs.build-and-push.outputs.image }}|g" k8s/production/deployment-green.yaml
          
          # Apply green deployment
          kubectl apply -f k8s/production/deployment-green.yaml
          
          # Wait for green deployment to be ready
          kubectl rollout status deployment/mba-job-hunter-api-green -n production --timeout=600s
          
          # Health check on green deployment
          kubectl port-forward -n production deployment/mba-job-hunter-api-green 8080:8000 &
          PORT_FORWARD_PID=$!
          sleep 10
          
          # Test green deployment
          for i in {1..5}; do
            if curl -f http://localhost:8080/api/v1/health; then
              echo "✅ Green deployment health check passed"
              break
            fi
            echo "⏳ Waiting for green deployment... ($i/5)"
            sleep 10
          done
          
          kill $PORT_FORWARD_PID
          
          # Switch traffic to green (update service selector)
          kubectl patch service mba-job-hunter-api -n production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and verify
          sleep 30
          curl -f https://mba-job-hunter.com/api/v1/health
          
          # Remove old blue deployment
          kubectl delete deployment mba-job-hunter-api-blue -n production --ignore-not-found=true
          
          # Rename green to blue for next deployment
          kubectl patch deployment mba-job-hunter-api-green -n production -p '{"metadata":{"name":"mba-job-hunter-api-blue"}}'
          
      - name: 🏥 Production Health Check
        run: |
          echo "🏥 Running comprehensive health checks..."
          
          # API health
          curl -f https://mba-job-hunter.com/api/v1/health
          
          # Database connectivity
          kubectl exec -n production deployment/mba-job-hunter-api-blue -- python -c "
          import asyncio
          from app.core.database import db_manager
          
          async def test_db():
              await db_manager.init_database()
              print('✅ Database connection successful')
          
          asyncio.run(test_db())
          "
          
          # Redis connectivity
          kubectl exec -n production deployment/mba-job-hunter-api-blue -- python -c "
          import asyncio
          from app.core.database import get_redis_client
          
          async def test_redis():
              redis = await get_redis_client()
              await redis.ping()
              print('✅ Redis connection successful')
          
          asyncio.run(test_redis())
          "
          
      - name: 📊 Performance Validation
        run: |
          echo "📊 Running performance validation..."
          
          # Install artillery
          npm install -g artillery@latest
          
          # Create performance test
          cat > production-validation.yml << EOF
          config:
            target: 'https://mba-job-hunter.com'
            phases:
              - duration: 60
                arrivalRate: 10
          scenarios:
            - name: "Production validation"
              flow:
                - get:
                    url: "/api/v1/health"
                    expect:
                      - statusCode: 200
                - get:
                    url: "/"
                    expect:
                      - statusCode: 200
          EOF
          
          # Run validation test
          artillery run production-validation.yml
          
      - name: 📢 Notify Production Deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🌟 Production deployment ${{ job.status }}! 
            🏷️ Image: ${{ needs.build-and-push.outputs.image }}
            🔗 URL: https://mba-job-hunter.com
            👤 Deployed by: ${{ github.actor }}
            📊 Digest: ${{ needs.build-and-push.outputs.digest }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 回滾機制
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.event_name == 'release' || github.event.inputs.environment == 'production')
    needs: [deploy-production]
    environment:
      name: production
      
    steps:
      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: 🔐 Configure Kubernetes credentials
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config
          
      - name: 🔄 Perform Rollback
        run: |
          echo "🔄 Performing rollback..."
          
          # Rollback to previous deployment
          kubectl rollout undo deployment/mba-job-hunter-api-blue -n production
          
          # Wait for rollback to complete
          kubectl rollout status deployment/mba-job-hunter-api-blue -n production --timeout=300s
          
          # Verify rollback
          curl -f https://mba-job-hunter.com/api/v1/health
          
      - name: 📢 Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#deployments'
          text: |
            🔄 ROLLBACK executed for production deployment
            🚨 Deployment failed and was automatically rolled back
            👤 Triggered by: ${{ github.actor }}
            🔗 URL: https://mba-job-hunter.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 清理舊鏡像
  cleanup:
    name: 🧹 Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 🧹 Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true