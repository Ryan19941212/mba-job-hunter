name: 🔑 Secrets Validation

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/secrets-check.yml'

jobs:
  validate-secrets:
    name: 🔍 Validate Required Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔑 Check Required Secrets
        run: |
          echo "🔍 Validating required GitHub Secrets..."
          
          # Define required secrets
          REQUIRED_SECRETS=(
            "OPENAI_API_KEY"
            "SECRET_KEY"
            "DATABASE_URL"
            "REDIS_URL"
          )
          
          OPTIONAL_SECRETS=(
            "ANTHROPIC_API_KEY"
            "NOTION_API_KEY" 
            "RAILWAY_TOKEN"
            "SLACK_WEBHOOK_URL"
            "SENTRY_DSN"
            "DOCKER_USERNAME"
            "DOCKER_PASSWORD"
          )
          
          MISSING_REQUIRED=()
          MISSING_OPTIONAL=()
          
          # Check required secrets
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              MISSING_REQUIRED+=("$secret")
              echo "❌ Missing required secret: $secret"
            else
              echo "✅ Found required secret: $secret"
            fi
          done
          
          # Check optional secrets
          for secret in "${OPTIONAL_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              MISSING_OPTIONAL+=("$secret")
              echo "⚠️  Missing optional secret: $secret"
            else
              echo "✅ Found optional secret: $secret"
            fi
          done
          
          # Summary
          echo ""
          echo "📋 Secret Validation Summary:"
          echo "Required secrets found: $((${#REQUIRED_SECRETS[@]} - ${#MISSING_REQUIRED[@]}))/${#REQUIRED_SECRETS[@]}"
          echo "Optional secrets found: $((${#OPTIONAL_SECRETS[@]} - ${#MISSING_OPTIONAL[@]}))/${#OPTIONAL_SECRETS[@]}"
          
          if [ ${#MISSING_REQUIRED[@]} -gt 0 ]; then
            echo ""
            echo "❌ Missing required secrets that must be configured:"
            printf '%s\n' "${MISSING_REQUIRED[@]}"
            echo ""
            echo "Please add these secrets in GitHub Repository Settings → Secrets and variables → Actions"
            exit 1
          fi
          
          if [ ${#MISSING_OPTIONAL[@]} -gt 0 ]; then
            echo ""
            echo "⚠️  Missing optional secrets (features may be limited):"
            printf '%s\n' "${MISSING_OPTIONAL[@]}"
          fi
          
          echo ""
          echo "🎉 All required secrets are configured!"
          
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: 🧪 Test API Keys (if available)
        run: |
          echo "🧪 Testing API key validity..."
          
          # Test OpenAI API Key
          if [ -n "$OPENAI_API_KEY" ] && [ "$OPENAI_API_KEY" != "test_key" ]; then
            echo "Testing OpenAI API..."
            response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $OPENAI_API_KEY" \
              https://api.openai.com/v1/models -o /dev/null)
            if [ "$response" = "200" ]; then
              echo "✅ OpenAI API key is valid"
            else
              echo "❌ OpenAI API key validation failed (HTTP $response)"
            fi
          else
            echo "⚠️  OpenAI API key not available for testing"
          fi
          
          # Test Notion API Key
          if [ -n "$NOTION_API_KEY" ] && [ "$NOTION_API_KEY" != "test_key" ]; then
            echo "Testing Notion API..."
            response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $NOTION_API_KEY" \
              -H "Notion-Version: 2022-06-28" \
              https://api.notion.com/v1/users/me -o /dev/null)
            if [ "$response" = "200" ]; then
              echo "✅ Notion API key is valid"
            else
              echo "❌ Notion API key validation failed (HTTP $response)"
            fi
          else
            echo "⚠️  Notion API key not available for testing"
          fi
          
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          
      - name: 📋 Generate Setup Instructions
        run: |
          echo "# 🔑 GitHub Secrets Setup Instructions" > secrets-setup.md
          echo "" >> secrets-setup.md
          echo "## Required Secrets" >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "Add these secrets in GitHub Repository Settings → Secrets and variables → Actions:" >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "### 🔑 Authentication & Security" >> secrets-setup.md
          echo '```' >> secrets-setup.md
          echo "OPENAI_API_KEY=sk-your_openai_api_key_here" >> secrets-setup.md
          echo "SECRET_KEY=your-32-character-secret-key-for-jwt-signing" >> secrets-setup.md
          echo '```' >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "### 🗃️ Database Configuration" >> secrets-setup.md
          echo '```' >> secrets-setup.md
          echo "DATABASE_URL=postgresql+asyncpg://user:password@host:5432/database" >> secrets-setup.md
          echo "REDIS_URL=redis://user:password@host:6379/0" >> secrets-setup.md
          echo '```' >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "### 🚀 Optional Services" >> secrets-setup.md
          echo '```' >> secrets-setup.md
          echo "NOTION_API_KEY=secret_your_notion_integration_token" >> secrets-setup.md
          echo "RAILWAY_TOKEN=your_railway_deployment_token" >> secrets-setup.md
          echo "SLACK_WEBHOOK_URL=https://hooks.slack.com/services/your/slack/webhook" >> secrets-setup.md
          echo "SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id" >> secrets-setup.md
          echo '```' >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "## 📝 How to Add Secrets" >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "1. Go to your GitHub repository" >> secrets-setup.md
          echo "2. Click **Settings** → **Secrets and variables** → **Actions**" >> secrets-setup.md
          echo "3. Click **New repository secret**" >> secrets-setup.md
          echo "4. Add each secret name and value" >> secrets-setup.md
          echo "5. Click **Add secret**" >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "## 🔗 Useful Links" >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "- [OpenAI API Keys](https://platform.openai.com/api-keys)" >> secrets-setup.md
          echo "- [Notion Integration](https://developers.notion.com/docs/create-a-notion-integration)" >> secrets-setup.md
          echo "- [Railway Dashboard](https://railway.app/dashboard)" >> secrets-setup.md
          echo "- [Slack Webhook Setup](https://api.slack.com/messaging/webhooks)" >> secrets-setup.md
          echo "" >> secrets-setup.md
          echo "---" >> secrets-setup.md
          echo "Generated: $(date)" >> secrets-setup.md
          
      - name: 📊 Upload Setup Instructions
        uses: actions/upload-artifact@v3
        with:
          name: secrets-setup-instructions
          path: secrets-setup.md
          retention-days: 30
          
      - name: 📢 Notify Status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 All secrets validation passed!"
            echo "Your repository is ready for CI/CD deployment."
          else
            echo "❌ Secrets validation failed."
            echo "Please check the logs above and configure missing secrets."
          fi